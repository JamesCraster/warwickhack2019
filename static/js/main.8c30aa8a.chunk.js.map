{"version":3,"sources":["ChatBox.js","audio/encoder.js","App.js","serviceWorker.js","index.js"],"names":["ChatBox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateInputValue","evt","setState","inputValue","target","value","onSubmit","state","messages","push","react_default","a","createElement","List","Item","key","Icon","name","Content","input","_loop","i","setTimeout","console","log","sendToEncoder","length","receiveDecodeMessage","message","document","getElementById","scrollTop","scrollHeight","style","height","Segment","id","overflowY","width","marginLeft","marginRight","textAlign","Form","paddingRight","Input","action","placeholder","onChange","maxLength","Component","packet_delay","bit_pulse_delay","freq_high","freq_low","word_length","repetitions","audioContext","window","AudioContext","webkitAudioContext","oscillator","createOscillator","generate_packet","bin","sum","parity","byte_index","map","String","elem","repeat","join","split","parseInt","generate_bit","bit","freq","type","frequency","setValueAtTime","currentTime","connect","destination","start","send","str","char_index","resume","charCodeAt","disconnect","App","className","Menu","inverted","fluid","header","src","alt","Header","as","fontStyle","src_ChatBox","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c30aa8a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Input, Segment, Form, List } from \"semantic-ui-react\";\n\nclass ChatBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      key: 1,\n      inputValue: \"\",\n      messages: [\n        <List.Item key={0}>\n          Enter text below and everyone can hear it!\n        </List.Item>,\n      ],\n    };\n  }\n\n  updateInputValue = evt => {\n    this.setState({\n      inputValue: evt.target.value,\n    });\n  };\n\n  onSubmit = () => {\n    let messages = this.state.messages;\n    messages.push(\n      <List.Item key={this.state.key}>\n        <List.Icon name=\"volume up\" />\n        <List.Content>{this.state.inputValue}</List.Content>\n      </List.Item>,\n    );\n    let input = this.state.inputValue;\n    for (let i = 0; i < input.length; i++) {\n      setTimeout(() => {\n        console.log(input[i]);\n        this.props.sendToEncoder(input[i]);\n      }, i * 6000);\n    }\n    this.setState({ key: this.state.key + 1 });\n    this.setState({ inputValue: \"\" });\n  };\n\n  receiveDecodeMessage = message => {\n    let messages = this.state.messages;\n    messages.push(\n      <List.Item key={this.state.key}>\n        <List.Icon name=\"microphone\" />\n        <List.Content>{message}</List.Content>\n      </List.Item>,\n    );\n    this.setState({ key: this.state.key + 1 });\n  };\n\n  componentDidUpdate() {\n    document.getElementById(\"message\").scrollTop = document.getElementById(\n      \"message\",\n    ).scrollHeight;\n  }\n  render() {\n    return (\n      <div style={{ height: \"80%\" }}>\n        <Segment\n          id=\"message\"\n          style={{\n            height: \"60%\",\n            overflowY: \"scroll\",\n            width: \"60%\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n          }}\n        >\n          <List style={{ textAlign: \"left\" }}>{this.state.messages}</List>\n        </Segment>\n        <Form onSubmit={this.onSubmit} style={{ paddingRight: \"50px\" }}>\n          <Input\n            value={this.state.inputValue}\n            action=\"Submit\"\n            placeholder=\"Enter text...\"\n            onChange={this.updateInputValue}\n            maxLength=\"25\"\n          />\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default ChatBox;\n","var packet_delay = 1000; //ms\nvar bit_pulse_delay = 120; //ms\n\nconst freq_high = 19000; //hz\nconst freq_low = 20000; //hz\n\nvar word_length = 8;\nvar repetitions = 3;\n\nvar audioContext = new (window.AudioContext || window.webkitAudioContext)();\n\nvar oscillator = audioContext.createOscillator();\noscillator.start();\n\nfunction send(str) {\n  var char_index = 0;\n  audioContext.resume();\n  generate_bit(0);\n  setTimeout(() => {\n    for (var i = 0; i < str.length; i++) {\n      setTimeout(() => {\n        //console.log(str.charCodeAt(char_index));\n        generate_packet(str.charCodeAt(char_index));\n        char_index++;\n      }, (packet_delay + (word_length * 3 + 3) * bit_pulse_delay) * i);\n    }\n  }, packet_delay);\n\n  setTimeout(() => {\n    generate_bit(0);\n  }, (packet_delay + (word_length * 3 + 3) * bit_pulse_delay) * str.length);\n\n  setTimeout(() => {\n    oscillator.disconnect();\n  }, (2 * packet_delay + (word_length * 3 + 3) * bit_pulse_delay) * str.length);\n}\n\nfunction generate_packet(value) {\n  //Convert to Binary Array\n  var bin = [];\n  var sum = 0;\n  for (var i = 0; i < word_length; i++) {\n    bin[i] = (value >> (word_length - 1 - i)) & 1;\n    sum += bin[i];\n  }\n\n  var parity = sum % 2;\n\n  bin.push(parity);\n\n  console.log(bin);\n  var byte_index = 0;\n  bin = bin\n    .map(String)\n    .map(elem => elem.repeat(3))\n    .join(\"\")\n    .split(\"\")\n    .map(elem => parseInt(elem));\n\n  console.log(bin);\n  //Transmit header\n  generate_bit(1);\n  setTimeout(function() {\n    generate_bit(0);\n    setTimeout(function() {\n      //Transmit payload within nested timeout\n      for (var i = 0; i <= word_length * repetitions; i++) {\n        setTimeout(function() {\n          generate_bit(bin[byte_index++]);\n          //console.log(bin[i]);\n        }, i * bit_pulse_delay);\n      }\n    }, bit_pulse_delay);\n  }, bit_pulse_delay);\n\n  //Set intermediate frequency to low_output\n  setTimeout(function() {\n    generate_bit(0);\n  }, bit_pulse_delay * word_length * repetitions + 3);\n}\n\nfunction generate_bit(bit) {\n  generate_sine(bit == 1 ? freq_high : freq_low);\n}\n\nfunction generate_sine(freq) {\n  oscillator.type = \"sine\";\n  oscillator.frequency.setValueAtTime(freq, audioContext.currentTime);\n  oscillator.connect(audioContext.destination);\n  //console.log(audioContext.currentTime);\n}\n\nexport default send;\n","import React, { Component } from \"react\";\nimport { Header, Menu } from \"semantic-ui-react\";\nimport ChatBox from \"./ChatBox\";\nimport send from \"./audio/encoder\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\" style={{ textAlign: \"center\", height: \"100%\" }}>\n        <Menu inverted fluid>\n          <Menu.Item header>\n            <img src=\"logo-white.png\" alt=\"Logo\" />\n          </Menu.Item>\n          <Menu.Item header>Talking 2.0</Menu.Item>\n        </Menu>\n        <Header as=\"h1\">Talking 2.0</Header>\n        <p style={{ fontStyle: \"italic\" }}>Even better than talking</p>\n        <ChatBox sendToEncoder={send} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}